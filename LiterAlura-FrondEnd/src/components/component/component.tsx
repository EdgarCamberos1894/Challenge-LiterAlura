/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/7ogCeLb8maH
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
"use client";
import "../../style.css"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { PopoverTrigger, PopoverContent, Popover } from "@/components/ui/popover"
import { DropdownMenuTrigger, DropdownMenuRadioItem, DropdownMenuSeparator, DropdownMenuSubTrigger, DropdownMenuSubContent, DropdownMenuSub, DropdownMenuRadioGroup, DropdownMenuContent, DropdownMenu } from "@/components/ui/dropdown-menu"

import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { SearchParamsContext } from "next/dist/shared/lib/hooks-client-context.shared-runtime";


interface ArrowDownIconProps{
  [key: string]: any;
}

interface BookIconProps {
  [key: string]: any; 
}

interface CalendarIconProps {
  [key: string]: any; 
}

interface DownloadIconProps {
  [key: string]: any;
}

interface GlobeIconProps {
  [key: string]: any;
}

interface InfoIconProps {
  [key: string]: any;
}


interface UserIconProps {
  [key: string]: any;
}

interface SearchIconProps{
  [key: string]: any;
}

interface Author {
  id: number;
  name: string;
  birthYear: number;
  deathYear: number;
  libros: Book[];
}

interface Book {
  id: number;
  titulo: string;
}


export function Component() {
  const [books, setBooks] = useState([]);
  const [query, setQuery] = useState('');
  const [searchQuery, setSearchQuery] = useState(''); 
  const [fecha, setFecha] = useState('');
  const [fechaResult, setFechaResult] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [searchPerformed, setSearchPerformed] = useState(false);
  const [authors, setAuthors] = useState<Author[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingBusqueda, setLoadingBusqueda] = useState(true);
  const [loadingAutores, setLoadingAutores] = useState(true);
  const [loadingLibros, setLoadingLibros] = useState(true);
  const [authorBooks, setAuthorBooks] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [orderBy, setOrderBy] = useState(null); 
  const [selectedLanguage, setSelectedLanguage] = useState("Todos");
  const searchInputRef = useRef(null); 
  const fechaInputRef = useRef(null);


  const handleLanguageChange = (language) => {
    setSelectedLanguage(language);
    const encodedLanguage = encodeURIComponent(language);
    axios.get(`http://localhost:8080/libros/idioma/${encodedLanguage}`)
      .then(response => {
        setBooks(response.data);
      })
      .catch(error => {
        console.error("Error fetching data:", error);
      });
  };
  
  const handleOrderByChange = (newValue) => {
    setOrderBy(newValue);
  };

  const sortBooks = (orderBy) => {
    const sortedBooks = [...books];
    switch (orderBy) {
      case 'titulo':
        sortedBooks.sort((a, b) => (a.titulo > b.titulo ? 1 : -1));
        break;
      case 'descargas':
        sortedBooks.sort((a, b) => b.downloadCount - a.downloadCount);
        break;
      default:
        break;
    }
    return sortedBooks;
  };

 

  useEffect(() => {
    setLoading(true)
    axios.get("http://localhost:8080/libros")
      .then(response => {
        setBooks(response.data);
        setLoading(false)
      })
      .catch(error => {
        console.error("Error fetching data:", error);
        setLoading(false)
      });
  }, []);

  const handleGetLibros =(lenguaje) => {
    setSelectedLanguage(lenguaje)
    axios.get("http://localhost:8080/libros")
      .then(response => {
        setBooks(response.data);
      })
      .catch(error => {
        console.error("Error fetching data:", error);
      });
  }
  

  const handleSearch = () => {
    if (query.trim()) {
      setLoadingBusqueda(true);
      setSearchPerformed(true);
      axios.get(`http://localhost:8080/libros/${query}`)
        .then(response => {
          setSearchResults(response.data);
          setLoadingBusqueda(false);
          setSearchQuery(query);
          handleGetLibros(selectedLanguage);
          getAutores();
        })
        .catch(error => {
          console.error("Error fetching data:", error);
          setLoadingBusqueda(false);
        });
    }
  };

  

  const handleAutorFecha = () => {
    setLoadingAutores(true);
    if (fecha.trim()) {
      axios.get(`http://localhost:8080/autores/fecha/${fecha}`)
        .then(response => {
          setAuthors(response.data);
          setLoadingAutores(false);
          setFechaResult(fecha);
        })
        .catch(error => {
          console.error("Error fetching data:", error);
          setLoading(false);
        });
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      if (document.activeElement === searchInputRef.current) {
        handleSearch();
      } else if (document.activeElement === fechaInputRef.current) {
        handleAutorFecha();
      }
    }
  };

  useEffect(() => {
    setLoading(true);
    axios.get("http://localhost:8080/autores")
      .then(response => {
        setAuthors(response.data);
        setLoading(false);
      })
      .catch(error => {
        console.error("Error fetching data:", error);
        setLoading(false);
      });
  }, []);

  const getAutores = () => {
    setLoadingAutores(true);
    axios.get("http://localhost:8080/autores")
      .then(response => {
        setAuthors(response.data);
        setLoadingAutores(false);
        setFechaResult("")
      })
      .catch(error => {
        console.error("Error fetching data:", error);
        setLoadingAutores(false);
            });
  }


  const loadAuthorBooks = (authorId) => {
    setLoadingAutores(true);
    axios.get(`http://localhost:8080/autores/${authorId}/libros`)
      .then(response => {
        setAuthorBooks(response.data);
        setLoadingAutores(false);
        setModalVisible(true); 
      })
      .catch(error => {
        console.error("Error fetching author's books:", error);
        setLoadingAutores(false);
      });
  };

  return (
    <div className="flex flex-col h-screen">
      <nav className="flex justify-between items-center py-4 px-8 bg-white rounded-full shadow-md">
        <div className="flex items-center space-x-8">
          <a className="flex items-center space-x-2" href="#">
            <img
              alt="Logo"
              className="h-6 w-6"
              height="24"
              src="/images/book.png"
              style={{
                aspectRatio: "24/24",
                objectFit: "cover",
              }}
              width="24"
            />
            <span className="font-bold text-xl">LiterAlura</span>
          </a>
        </div>
        <div className="flex items-center space-x-4">
          <div className="relative flex items-center">
            <Input 
              ref={searchInputRef}
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              onKeyDown={handleKeyPress}
              className="rounded-full border border-gray-200 px-4 py-2 text-sm pr-12 dark:border-gray-800" placeholder="Search..." 
            />
            <Button onClick={handleSearch} className="absolute right-2 rounded-full" size="icon" variant="ghost">
              <SearchIcon className="h-5 w-5 text-gray-500" />
              <span className="sr-only">Search</span>
            </Button>
          </div>
        </div>
      </nav>
      {loading ? (
        <div className="flex items-center justify-center h-[20vh] w-full">
        <div className="text-center space-y-2">
          <h3 className="text-2xl font-semibold text-gray-700 dark:text-gray-300">Cargando datos, por favor espere unos segundos    </h3>
        </div>
      </div>
      ):(
        books.length==0 && selectedLanguage=="Todos"? (
        <div className="flex items-center justify-center h-[20vh] w-full">
            <div className="text-center space-y-2">
              <h3 className="text-2xl font-semibold text-gray-700 dark:text-gray-300">AÃºn no hay libros Registrados</h3>
              <p className="text-gray-500 dark:text-gray-400">
                Pero puedes usar la barra de busqueda para registrar nuevos               
              </p>
            </div>
        </div>
      ):(
        <div className="flex-1 overflow-y-auto">
          {searchPerformed && (
            <div className="px-8 py-6">
              <h2 className="text-4xl font-bold mb-4 text-gray-900 dark:text-gray-100">Resultados de Busqueda</h2>
              {loadingBusqueda ? (
                <div className="flex items-center justify-center h-[20vh] w-full">
                <div className="text-center space-y-2">
                  <h3 className="text-2xl font-semibold text-gray-700 dark:text-gray-300">Cargando respuesta, por favor espere    </h3>
                </div>
              </div>
              ):(
              <div className="overflow-x-auto">
                <div className="flex space-x-6">
                  {searchResults.length == 0 ? (
                    <div className="flex items-center justify-center h-[20vh] w-full">
                      <div className="text-center space-y-2">
                        <h3 className="text-2xl font-semibold text-gray-700 dark:text-gray-300">No se encontraron resultados</h3>
                        <p className="text-gray-500 dark:text-gray-400">
                          Lo sentimos, no se encontraron resultados para "{searchQuery}""                    
                        </p>
                      </div>
                    </div>
                  ):(
                    searchResults.map(result => (
                      <div className="bg-white rounded-lg shadow-md overflow-hidden flex-shrink-0 w-64">
                        <div className="relative">
                          <img
                            alt={result.id}
                            className="w-full-image h-48 object-cover"
                            src={result.formatos.imageUrl}
                            width="200"
                          />
                          <div className="absolute top-2 right-2 bg-gray-800 text-white px-2 py-1 rounded-full text-xs flex items-center">
                            <DownloadIcon className="h-4 w-4 inline-block mr-1" />
                            <span>{result.downloadCount}</span>
                          </div>
                        </div>
                        <div className="p-4">
                          <h3 className="text-lg font-bold-title mb-2"><a href={result.formatos.bookLink} target="_blank" rel="noopener noreferrer">{result.titulo}</a></h3>
                          <p className="text-gray-500 mb-2 flex items-center">
                            <UserIcon className="h-4 w-4 mr-1" />
                            <span className="font-serif-cards italic">{result.autores.map(author => author.name).join(", ")}</span>
                          </p>
                          <p className="text-gray-500 mb-2 flex items-center">
                            <GlobeIcon className="h-4 w-4 mr-1" />
                            <span className="font-mono">{result.lenguajes.join(", ")}</span>
                          </p>
                          <a href={result.formatos.downloadBookLink} className="bg-blue-500 hover:bg-blue-600 text-white font-bold text-sm py-2 px-4 rounded-full">
                            <DownloadIcon className="h-4 w-4 inline-block mr-2" />
                            Download
                          </a>
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </div>
              )}
            </div>
          )}
          <div className="px-8 py-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-4xl font-bold mb-4 text-gray-900 dark:text-gray-100">Libros Registrados</h2>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button className="flex items-center gap-2" variant="outline">
                    <ArrowDownIcon className="h-4 w-4" />
                    Ordenar Por
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-[200px]">
                  <DropdownMenuRadioGroup>
                    <DropdownMenuRadioItem value="titulo" style={orderBy === "titulo" ? { fontWeight: "bold" } : {}} onClick={() => handleOrderByChange("titulo")}>
                      Titulo
                    </DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="descargas" style={orderBy === "descargas" ? { fontWeight: "bold" } : {}} onClick={() => handleOrderByChange("descargas")}>
                      Descargas
                    </DropdownMenuRadioItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuSub>
                      <DropdownMenuSubTrigger>Lenguaje</DropdownMenuSubTrigger>
                      <DropdownMenuSubContent className="w-[200px]">
                      <DropdownMenuRadioItem value="todos" onClick={() => handleGetLibros("Todos")} style={selectedLanguage === "Todos" ? { fontWeight: "bold" } : {}}>Todos</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="espanol" onClick={() => handleLanguageChange("EspaÃ±ol")} style={selectedLanguage === "EspaÃ±ol" ? { fontWeight: "bold" } : {}}>EspaÃ±ol</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="ingles" onClick={() => handleLanguageChange("InglÃ©s")} style={selectedLanguage === "InglÃ©s" ? { fontWeight: "bold" } : {}}>InglÃ©s</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="frances" onClick={() => handleLanguageChange("FrancÃ©s")} style={selectedLanguage === "FrancÃ©s" ? { fontWeight: "bold" } : {}}>FrancÃ©s</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="aleman" onClick={() => handleLanguageChange("AlemÃ¡n")} style={selectedLanguage === "AlemÃ¡n" ? { fontWeight: "bold" } : {}}>AlemÃ¡n</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="tagalog" onClick={() => handleLanguageChange("Tagalog")} style={selectedLanguage === "Tagalog" ? { fontWeight: "bold" } : {}}>Tagalog</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="portugues" onClick={() => handleLanguageChange("PortuguÃ©s")} style={selectedLanguage === "PortuguÃ©s" ? { fontWeight: "bold" } : {}}>PortuguÃ©s</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="nerlandes" onClick={() => handleLanguageChange("NeerlandÃ©s")} style={selectedLanguage === "NeerlandÃ©s" ? { fontWeight: "bold" } : {}}>NeerlandÃ©s</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="portugues" onClick={() => handleLanguageChange("PortuguÃ©s")} style={selectedLanguage === "PortuguÃ©s" ? { fontWeight: "bold" } : {}}>PortuguÃ©s</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="arabe" onClick={() => handleLanguageChange("Ãrabe")} style={selectedLanguage === "Ãrabe" ? { fontWeight: "bold" } : {}}>Ãrabe</DropdownMenuRadioItem>
                      </DropdownMenuSubContent>
                    </DropdownMenuSub>
                  </DropdownMenuRadioGroup>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
            <div className="overflow-x-auto">
              <div className="flex space-x-6">
              {selectedLanguage && books.length === 0 ? (
                <div className="flex items-center justify-center h-[20vh] w-full">
                <div className="text-center space-y-2">
                  <h3 className="text-2xl font-semibold text-gray-700 dark:text-gray-300">No se encontraron resultados</h3>
                  <p className="text-gray-500 dark:text-gray-400">
                    Lo sentimos, no se encontraron resultados libros escritos en "{selectedLanguage}".
                  </p>
                </div>
              </div>
              ):(
              sortBooks(orderBy).map((book) => (
                <div className="bg-white rounded-lg shadow-md overflow-hidden flex-shrink-0 w-64">
                  <div className="relative">
                    <img
                      alt={book.id}
                      className="w-full-image h-48 object-cover"
                      src={book.formatos.imageUrl}
                      width="200"
                    />
                    <div className="absolute top-2 right-2 bg-gray-800 text-white px-2 py-1 rounded-full text-xs flex items-center">
                      <DownloadIcon className="h-4 w-4 inline-block mr-1" />
                      <span>{book.downloadCount}</span>
                    </div>
                  </div>
                  <div className="p-4">
                    <h3 className="text-lg font-bold-title mb-2"><a href={book.formatos.bookLink} target="_blank" rel="noopener noreferrer">{book.titulo}</a></h3>
                    <p className="text-gray-500 mb-2 flex items-center">
                      <UserIcon className="h-4 w-4 mr-1" />
                      <span className="font-serif-cards italic">{book.autores.map(author => author.name).join(", ")}</span>
                    </p>
                    <p className="text-gray-500 mb-2 flex items-center">
                      <GlobeIcon className="h-4 w-4 mr-1" />
                      <span className="font-mono">{book.lenguajes.join(", ")}</span>
                    </p>
                    <a href={book.formatos.downloadBookLink} className="bg-blue-500 hover:bg-blue-600 text-white font-bold text-sm py-2 px-4 rounded-full">
                      <DownloadIcon className="h-4 w-4 inline-block mr-2" />
                      Download
                    </a>
                  </div>
                </div>
              )))}
              </div>
            </div>
          </div>
          <div className="px-8 py-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-4xl font-bold mb-4 text-gray-900 dark:text-gray-100">Autores {fechaResult === "" ? fechaResult : "(" + fechaResult+")"}</h2>
                <div className="p-2">
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button className="flex items-center gap-2" variant="outline">
                        <CalendarIcon className="h-4 w-4" />
                        <span>
                          Autores vivos en...
                        </span>
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="p-0 max-w-[276px]">
                      <div className="grid grid-cols-3 gap-2 p-2">
                        <div className="col-span-3">
                          <Input ref={fechaInputRef}
                          value={fecha}
                          onChange={(e) => setFecha(e.target.value)}
                          onKeyDown={handleKeyPress}
                          className="w-full" 
                          placeholder="AÃ±o" 
                          type="number" />
                        </div>
                        <div className="col-span-3">
                          <Button onClick={getAutores} className="w-full" variant="outline">
                            <span>
                              Mostrar todos los autores   
                            </span>
                          </Button>
                        </div>
                      </div>
                    </PopoverContent>
                  </Popover>
                </div>
              </div>
              <div className="overflow-x-auto">
                <div className="flex space-x-6">
                  {authors.length === 0 ? (
                    <div className="flex items-center justify-center h-[20vh] w-full">
                      <div className="text-center space-y-2">
                        <h3 className="text-2xl font-semibold text-gray-700 dark:text-gray-300">No se encontraron resultados</h3>
                        <p className="text-gray-500 dark:text-gray-400">
                          Lo sentimos, no se encontraron resultados de autores vivos en "{fechaResult}".
                        </p>
                      </div>
                    </div>
                  ) : (
                    authors.map(author => (
                      <div className="bg-white rounded-lg shadow-md overflow-hidden flex-shrink-0 w-64">                  
                      <div className="p-4">
                        <h3 className="text-lg font-bold mb-2">{author.name}</h3>
                        {author.birthYear>0 && author.deathYear>0 && (
                        <p className="text-gray-500 mb-2 flex items-center">
                          <CalendarIcon className="h-4 w-4 mr-1" />
                          <span className="font-mono">{author.birthYear} - {author.deathYear}</span>
                        </p>
                        )}
                        {author.libros.slice(0, 3).map(book => (
                          <p key={book.id} className="text-gray-500 mb-2 flex items-center">
                            <BookIcon className="h-4 w-4 mr-1" />
                            <span className="font-serif-cards italic">
                              {book.titulo}
                            </span>
                          </p>
                        ))}
                        {author.libros.length > 3 && (
                          <div className="text-gray-500 mb-2 flex items-center">
                            <BookIcon className="h-4 w-4 mr-1" />
                              <p className="text-gray-500 mb-2 flex items-center">
                                <span className="font-serif italic">...</span>
                              </p>
                          </div>
                        )}
                        <div className="flex justify-center pt-1">
                          <button onClick={() => loadAuthorBooks(author.id)} className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-full">
                            Ver mÃ¡s
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
          {modalVisible && authorBooks.length > 0 && (
            <div className="px-8 py-6">
              <h2 className="text-4xl font-bold mb-4 text-gray-900 dark:text-gray-100">{authorBooks[0].name}</h2>
              <div className="overflow-x-auto">
                <div className="flex space-x-6">
                  {authorBooks[0].libros.map(book => (
                    <div className="bg-white rounded-lg shadow-md overflow-hidden flex-shrink-0 w-64">
                      <div className="relative">
                        <img
                          alt={book.id}
                          className="w-full-image h-48 object-cover"
                          src={book.formatos.imageUrl}
                          width="200"
                        />
                        <div className="absolute top-2 right-2 bg-gray-800 text-white px-2 py-1 rounded-full text-xs flex items-center">
                          <DownloadIcon className="h-4 w-4 inline-block mr-1" />
                          <span>{book.downloadCount}</span>
                        </div>
                      </div>
                      <div className="p-4">
                        <h3 className="text-lg font-bold-title mb-2"><a href={book.formatos.bookLink} target="_blank" rel="noopener noreferrer">{book.titulo}</a></h3>
                        <p className="text-gray-500 mb-2 flex items-center">
                          <UserIcon className="h-4 w-4 mr-1" />
                          <span className="font-serif-cards italic">{book.autores.map(author => author.name).join(", ")}</span>
                        </p>
                        <p className="text-gray-500 mb-2 flex items-center">
                          <GlobeIcon className="h-4 w-4 mr-1" />
                          <span className="font-mono">{book.lenguajes.join(", ")}</span>
                        </p>
                        <a href={book.formatos.downloadBookLink} className="bg-blue-500 hover:bg-blue-600 text-white font-bold text-sm py-2 px-4 rounded-full">
                          <DownloadIcon className="h-4 w-4 inline-block mr-2" />
                          Download
                        </a>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
        )
      )}
      </div>
  )
}



const ArrowDownIcon:React.FC<ArrowDownIconProps> = (props: ArrowDownIconProps) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 5v14" />
      <path d="m19 12-7 7-7-7" />
    </svg>
  )
}


const SearchIcon: React.FC<SearchIconProps> = (props: SearchIconProps) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  )
}
const BookIcon: React.FC<BookIconProps> = (props: BookIconProps) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20" />
    </svg>
  );
};


const CalendarIcon: React.FC<CalendarIconProps> = (props: CalendarIconProps) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
    </svg>
  );
};


const DownloadIcon: React.FC<DownloadIconProps> = (props: DownloadIconProps) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="7 10 12 15 17 10" />
      <line x1="12" y1="15" x2="12" y2="3" />
    </svg>
  );
};


const GlobeIcon: React.FC<GlobeIconProps> = (props: GlobeIconProps) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20" />
      <path d="M2 12h20" />
    </svg>
  );
};



const UserIcon: React.FC<UserIconProps> = (props) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
      <circle cx="12" cy="7" r="4" />
    </svg>
  );
};




export default Component;